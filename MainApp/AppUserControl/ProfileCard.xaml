<UserControl
    x:Class="MSFSPopoutPanelManager.MainApp.AppUserControl.ProfileCard"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:appUserControl="clr-namespace:MSFSPopoutPanelManager.MainApp.AppUserControl"
    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:c="clr-namespace:CalcBinding;assembly=CalcBinding"
    xmlns:controls="clr-namespace:DotNetKit.Windows.Controls;assembly=DotNetKit.Wpf.AutoCompleteComboBox"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:domain="clr-namespace:MSFSPopoutPanelManager.DomainModel.Profile;assembly=DomainModel"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:viewmodel="clr-namespace:MSFSPopoutPanelManager.MainApp.ViewModel"
    Height="Auto"
    d:DataContext="{d:DesignInstance viewmodel:ProfileCardViewModel}"
    mc:Ignorable="d">
    <UserControl.Resources>
        <system:Double x:Key="IconSize">22</system:Double>
        <Style
            x:Key="TxtBlockDisableWhenLocked"
            BasedOn="{StaticResource TextBlockLabel}"
            TargetType="TextBlock">
            <Style.Triggers>
                <DataTrigger Binding="{Binding ActiveProfile.IsLocked}" Value="True">
                    <Setter Property="Foreground" Value="DimGray" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style
            x:Key="TxtBlockDisableWhenLockedInner"
            BasedOn="{StaticResource TextBlockLabel}"
            TargetType="TextBlock">
            <Style.Triggers>
                <DataTrigger Binding="{Binding DataContext.ProfileData.ActiveProfile.IsLocked, RelativeSource={RelativeSource AncestorType=UserControl, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Foreground" Value="DimGray" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>

    <DockPanel
        Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type StackPanel}}, Path=ActualHeight}"
        HorizontalAlignment="Stretch"
        VerticalAlignment="Stretch">
        <Grid
            Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type StackPanel}}, Path=ActualHeight}"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            Background="Transparent"
            DockPanel.Dock="Top">
            <Grid.RowDefinitions>
                <RowDefinition Height="44" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="50" />
            </Grid.RowDefinitions>
            <materialDesign:ColorZone
                Grid.Row="0"
                CornerRadius="20,20,0,0"
                DockPanel.Dock="Top"
                Mode="PrimaryDark">
                <StackPanel Height="44" Margin="16,6,8,0">
                    <DockPanel>
                        <StackPanel Width="810" Orientation="Horizontal">
                            <TextBox
                                x:Name="TxtBoxProfileTitle"
                                Margin="8,0,0,0"
                                FontSize="22"
                                FontWeight="Medium"
                                Foreground="White"
                                KeyDown="TxtBoxProfileTitle_KeyDown"
                                Text="{Binding ActiveProfile.Name, Mode=TwoWay}">
                                <TextBox.Style>
                                    <Style BasedOn="{StaticResource MaterialDesignTextBox}" TargetType="TextBox">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=ToggleButtonEditProfileTitle, Path=IsChecked}" Value="False">
                                                <Setter Property="BorderThickness" Value="0" />
                                                <Setter Property="IsReadOnly" Value="true" />
                                                <Setter Property="IsHitTestVisible" Value="false" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ElementName=ToggleButtonEditProfileTitle, Path=IsChecked}" Value="True">
                                                <Setter Property="IsReadOnly" Value="false" />
                                                <Setter Property="IsHitTestVisible" Value="true" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                            <ToggleButton
                                x:Name="ToggleButtonEditProfileTitle"
                                Width="16"
                                Height="16"
                                Margin="8,0,0,0"
                                materialDesign:ToggleButtonAssist.OnContent="{materialDesign:PackIcon Kind=PencilOff,
                                                                                                      Size=14}"
                                Click="ToggleButtonEditProfileTitle_Click"
                                IsChecked="False"
                                Style="{StaticResource MaterialDesignActionDarkToggleButton}"
                                ToolTip="Edit aircraft profile name">
                                <materialDesign:PackIcon
                                    Width="14"
                                    Height="14"
                                    Kind="Pencil" />
                            </ToggleButton>
                        </StackPanel>
                        <materialDesign:PopupBox
                            x:Name="PopupBoxFinder"
                            Margin="10,0,8,0"
                            Padding="0"
                            IsEnabled="{c:Binding 'ProfileData.Profiles.Count > 1'}"
                            PlacementMode="LeftAndAlignMiddles"
                            PopupHorizontalOffset="-8"
                            PopupUniformCornerRadius="4"
                            PopupVerticalOffset="-4"
                            Style="{StaticResource MaterialDesignPopupBox}">
                            <materialDesign:PopupBox.ToggleContent>
                                <Button
                                    Click="BtnPopupBoxFinder_Click"
                                    Style="{StaticResource IconButton}"
                                    ToolTip="Find an aircraft profile">
                                    <materialDesign:PackIcon Foreground="White" Kind="Magnify" />
                                </Button>
                            </materialDesign:PopupBox.ToggleContent>
                            <controls:AutoCompleteComboBox
                                x:Name="ComboBoxSearchProfile"
                                Width="250"
                                Height="42"
                                Margin="0"
                                Padding="5,0"
                                materialDesign:ComboBoxAssist.MaxLength="20"
                                materialDesign:HintAssist.Hint="Search Profile"
                                materialDesign:HintAssist.HintOpacity="1"
                                Background="#007ac1"
                                DisplayMemberPath="Name"
                                FontSize="12"
                                ItemsSource="{Binding ProfileData.Profiles}"
                                MaxDropDownHeight="500"
                                SelectedItem="{Binding SearchProfileSelectedItem}"
                                SelectedValuePath="Id"
                                Style="{StaticResource MaterialDesignComboBox}"
                                TextSearch.TextPath="Name">
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="SelectionChanged">
                                        <b:InvokeCommandAction Command="{Binding SearchProfileSelectedCommand}" />
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </controls:AutoCompleteComboBox>
                        </materialDesign:PopupBox>
                        <Button
                            Margin="0"
                            Command="{Binding AddProfileCommand}"
                            Style="{StaticResource IconButton}"
                            ToolTip="Add a new aircraft profile">
                            <materialDesign:PackIcon Kind="FilePlusOutline" />
                        </Button>
                        <Button
                            Margin="0"
                            Command="{Binding DeleteProfileCommand}"
                            Style="{StaticResource IconButton}"
                            ToolTip="Delete profile">
                            <materialDesign:PackIcon Kind="DeleteOutline" />
                        </Button>
                    </DockPanel>
                </StackPanel>
            </materialDesign:ColorZone>

            <DockPanel Grid.Row="1">
                <Expander Style="{DynamicResource CustomMaterialDesignExpander}">
                    <Expander.Header>
                        <DockPanel Width="876">
                            <StackPanel DockPanel.Dock="Left" Orientation="Horizontal">
                                <TextBlock
                                    Margin="0,0,10,0"
                                    FontSize="14"
                                    Style="{StaticResource TextBlockBody}">
                                    Active Aircraft:
                                </TextBlock>
                                <TextBlock FontSize="14" Text="{c:Binding 'FlightSimData.AircraftName == null ? &quot;Aircraft binding information is currently unavailable&quot; : FlightSimData.AircraftName'}">
                                    <TextBlock.Style>
                                        <Style BasedOn="{StaticResource TextBlockBody}" TargetType="{x:Type TextBlock}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding ProfileData.IsAircraftBoundToProfile}" Value="True">
                                                    <Setter Property="Foreground" Value="LightGreen" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding ProfileData.IsAircraftBoundToProfile}" Value="False">
                                                    <Setter Property="Foreground" Value="White" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding ProfileData.IsAllowedAddAircraftBinding}" Value="False">
                                                    <Setter Property="Foreground" Value="White" />
                                                    <Setter Property="ToolTip" Value="Aircraft is currently bound to another profile" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding FlightSimData.HasAircraftName}" Value="False">
                                                    <Setter Property="Foreground" Value="AntiqueWhite" />
                                                    <Setter Property="ToolTip" Value="No aircraft has been loaded by the game yet" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                                <ToggleButton
                                    Margin="10,0,0,0"
                                    materialDesign:ToggleButtonAssist.OnContent="{materialDesign:PackIcon Kind=AirplaneMinus,
                                                                                                          Size={StaticResource IconSize}}"
                                    Command="{Binding ToggleAircraftBindingCommand}"
                                    IsChecked="{Binding ProfileData.IsAircraftBoundToProfile, Mode=OneWay}"
                                    Style="{StaticResource IconToggleButton}"
                                    ToolTip="Toggle aircraft binding to profile"
                                    Visibility="{c:Binding 'FlightSimData.HasAircraftName and ProfileData.IsAllowedAddAircraftBinding'}">
                                    <materialDesign:PackIcon Kind="AirplanePlus" />
                                </ToggleButton>
                            </StackPanel>
                            <StackPanel DockPanel.Dock="Right">
                                <TextBlock
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    FontSize="14">
                                    <TextBlock.Style>
                                        <Style BasedOn="{StaticResource TextBlockBody}" TargetType="{x:Type TextBlock}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{c:Binding 'FlightSimData.AircraftName != null and AppSettingData.ApplicationSetting.AutoPopOutSetting.IsEnabled and ProfileData.IsAircraftBoundToProfile'}" Value="True">
                                                    <Setter Property="Foreground" Value="LightGreen" />
                                                    <Setter Property="Text" Value="(Auto Pop Out is Active)" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{c:Binding 'FlightSimData.AircraftName != null and AppSettingData.ApplicationSetting.AutoPopOutSetting.IsEnabled and ProfileData.IsAircraftBoundToProfile'}" Value="False">
                                                    <Setter Property="Foreground" Value="Red" />
                                                    <Setter Property="Text" Value="(Auto Pop Out is Inactive)" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </StackPanel>
                        </DockPanel>
                    </Expander.Header>
                    <StackPanel Margin="22,0,0,8">
                        <Separator Margin="0,0,0,10" />
                        <DockPanel>
                            <ToggleButton IsChecked="{Binding ActiveProfile.ProfileSetting.PowerOnRequiredForColdStart, Mode=TwoWay}" Style="{StaticResource ToggleButton}" />
                            <TextBlock Style="{StaticResource TextBlockLabel}" ToolTip="During cold start, Pop Out Manager will first turn on power and avionics for the aircraft in order &#x0a;to pop out the instrumentation panels. After pop out is completed, Pop Out Manager will then &#x0a;turn off aircraft power and avionics to put the aircraft back to cold and dark state.">Power on is required to pop out panels on cold start (for G1000 based aircraft ONLY if needed)</TextBlock>
                        </DockPanel>
                        <WrapPanel Margin="0,8,0,0">
                            <ToggleButton
                                Command="{Binding IncludeInGamePanelUpdatedCommand}"
                                IsChecked="{Binding ActiveProfile.ProfileSetting.IncludeInGamePanels, Mode=TwoWay, NotifyOnTargetUpdated=True}"
                                IsHitTestVisible="{c:Binding '!ActiveProfile.IsLocked',
                                                             Mode=OneWay}"
                                Style="{StaticResource ToggleButton}" />
                            <TextBlock Style="{StaticResource TxtBlockDisableWhenLocked}" ToolTip="Add in-game menu bar panels such as VFR Map, Checklist, ATC, etc. to profile to enable panel size and location management and touch support">Include in-game menu bar panels for pop out management and touch screen support</TextBlock>
                        </WrapPanel>
                        <StackPanel Margin="0,8,0,0" Orientation="Vertical">
                            <WrapPanel>
                                <ToggleButton
                                    Command="{Binding RefocusDisplayUpdatedCommand}"
                                    IsChecked="{Binding ActiveProfile.ProfileSetting.RefocusOnDisplay.IsEnabled, Mode=TwoWay, NotifyOnTargetUpdated=True}"
                                    IsHitTestVisible="{c:Binding '!ActiveProfile.IsLocked',
                                                                 Mode=OneWay}"
                                    Style="{StaticResource ToggleButton}" />
                                <TextBlock Style="{StaticResource TxtBlockDisableWhenLocked}" ToolTip="Automatically set focus back to game window after a period of inactivity after touching the designated monitor. This is overcome a bug in MSFS where NVIDIA frame generation does not work when focus is not in the game window.">Enable entire monitor display to have game refocus function when touch</TextBlock>
                            </WrapPanel>
                            <WrapPanel
                                Margin="36,0,0,0"
                                IsHitTestVisible="{c:Binding !ActiveProfile.IsLocked}"
                                Orientation="Horizontal"
                                Visibility="{Binding ActiveProfile.ProfileSetting.RefocusOnDisplay.IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}">
                                <WrapPanel Orientation="Vertical" Visibility="{Binding ActiveProfile.ProfileSetting.RefocusOnDisplay.IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}">
                                    <ItemsControl
                                        Margin="0"
                                        Padding="8"
                                        ItemsSource="{Binding ActiveProfile.ProfileSetting.RefocusOnDisplay.Monitors, Mode=TwoWay}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate DataType="{x:Type domain:MonitorInfo}">
                                                <WrapPanel Margin="0,0,0,4" Orientation="Horizontal">
                                                    <CheckBox
                                                        VerticalAlignment="Center"
                                                        Command="{Binding DataContext.RefocusDisplaySelectionUpdatedCommand, RelativeSource={RelativeSource AncestorType=UserControl, Mode=FindAncestor}}"
                                                        CommandParameter="{Binding Name}"
                                                        IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                                                    <WrapPanel
                                                        Margin="8,0,0,0"
                                                        VerticalAlignment="Center"
                                                        Orientation="Horizontal">
                                                        <TextBlock
                                                            Margin="0,0,5,0"
                                                            Style="{StaticResource TxtBlockDisableWhenLockedInner}"
                                                            Text="{Binding Name}" />
                                                        <TextBlock Style="{StaticResource TxtBlockDisableWhenLockedInner}" Text="(" />
                                                        <TextBlock Style="{StaticResource TxtBlockDisableWhenLockedInner}" Text="{Binding Width}" />
                                                        <TextBlock Style="{StaticResource TxtBlockDisableWhenLockedInner}" Text="x" />
                                                        <TextBlock Style="{StaticResource TxtBlockDisableWhenLockedInner}" Text="{Binding Height}" />
                                                        <TextBlock Style="{StaticResource TxtBlockDisableWhenLockedInner}" Text=")" />
                                                    </WrapPanel>
                                                </WrapPanel>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </WrapPanel>
                                <Button
                                    Margin="1,0,0,0"
                                    Command="{Binding RefocusDisplayRefreshedCommand}"
                                    Style="{StaticResource Button}">
                                    Refresh Display List
                                </Button>
                            </WrapPanel>
                        </StackPanel>
                        <WrapPanel Margin="0,8,0,0">
                            <ToggleButton
                                Command="{Binding AddNumPadUpdatedCommand}"
                                IsChecked="{Binding ActiveProfile.ProfileSetting.NumPadConfig.IsEnabled, Mode=TwoWay, NotifyOnTargetUpdated=True}"
                                IsHitTestVisible="{c:Binding '!ActiveProfile.IsLocked',
                                                             Mode=OneWay}"
                                Style="{StaticResource ToggleButton}" />
                            <TextBlock Style="{StaticResource TxtBlockDisableWhenLocked}" ToolTip="Add a virtual keyboard NumPad to the game that has MSFS focused before sending key command">Add a virtual keyboard NumPad</TextBlock>
                        </WrapPanel>
                        <WrapPanel Name="WrapPanelSwitchWindow" Margin="0,8,0,0">
                            <ToggleButton
                                Command="{Binding AddSwitchWindowUpdatedCommand}"
                                IsChecked="{Binding ActiveProfile.ProfileSetting.SwitchWindowConfig.IsEnabled, Mode=TwoWay, NotifyOnTargetUpdated=True}"
                                IsHitTestVisible="{c:Binding '!ActiveProfile.IsLocked',
                                                             Mode=OneWay}"
                                Style="{StaticResource ToggleButton}" />
                            <TextBlock Style="{StaticResource TxtBlockDisableWhenLocked}" ToolTip="Add a switch window command bar to the game">Add a switch window command bar</TextBlock>
                        </WrapPanel>
                    </StackPanel>
                </Expander>
            </DockPanel>

            <StackPanel Grid.Row="2" Background="#444444">
                <StackPanel Margin="24,2,0,0" Orientation="Horizontal">
                    <TextBlock
                        FontSize="14"
                        Style="{StaticResource TextBlockBody}"
                        Text="Pop Out Panels" />
                    <StackPanel Margin="723,0,0,0" Orientation="Horizontal">
                        <ToggleButton
                            materialDesign:ToggleButtonAssist.OnContent="{materialDesign:PackIcon Kind=CrosshairsGps}"
                            Command="{Binding ToggleEditPanelSourceCommand}"
                            IsChecked="{Binding ActiveProfile.IsEditingPanelSource, Mode=TwoWay}"
                            IsEnabled="{c:Binding '!ActiveProfile.IsLocked'}"
                            Style="{StaticResource IconToggleButton}"
                            ToolTip="Toggle editing of panel source">
                            <materialDesign:PackIcon Kind="Crosshairs" />
                        </ToggleButton>
                        <Button
                            Margin="10,0,0,0"
                            Command="{Binding AddPanelCommand}"
                            Style="{StaticResource IconButton}"
                            ToolTip="Add pop out panel">
                            <materialDesign:PackIcon Kind="PlusThick" />
                        </Button>
                        <ToggleButton
                            Margin="8,0,0,0"
                            materialDesign:ToggleButtonAssist.OnContent="{materialDesign:PackIcon Kind=LockOutline}"
                            Command="{Binding ToggleLockProfileCommand}"
                            IsChecked="{Binding ActiveProfile.IsLocked, Mode=TwoWay}"
                            Style="{StaticResource IconToggleButton}"
                            ToolTip="Lock and unlock pop out panel settings">
                            <materialDesign:PackIcon Kind="UnlockedOutline" />
                        </ToggleButton>
                    </StackPanel>
                </StackPanel>
                <appUserControl:PopOutPanelListEmpty Padding="0,0,0,10" Visibility="{c:Binding 'ActiveProfile.PanelConfigs.Count == 0'}" />
                <appUserControl:PopOutPanelList Padding="0,0,0,10" Visibility="{c:Binding 'ActiveProfile.PanelConfigs.Count > 0'}" />
            </StackPanel>

            <DockPanel Grid.Row="3">
                <Button
                    x:Name="BtnStartPopOut"
                    Width="300"
                    Margin="325,10,0,0"
                    Command="{Binding StartPopOutCommand}"
                    Content="Start Pop Out"
                    Style="{StaticResource FlatButton}"
                    ToolTip="Start pop out process" />
                <Button
                    x:Name="BtnClosePopOut"
                    Margin="0,10,0,0"
                    HorizontalAlignment="Right"
                    Command="{Binding ClosePopOutCommand}"
                    Content="Close All Pop Outs"
                    Style="{StaticResource FlatButton}"
                    ToolTip="Close all opened pop outs that are controlled by Popout Panel Manager" />
            </DockPanel>
        </Grid>
    </DockPanel>
</UserControl>
